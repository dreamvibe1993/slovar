{"version":3,"sources":["axios.js","Spinner/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","spinner","className","App","useState","words","setWords","currentWord","setCurrentWord","foundWord","setFoundWord","wordExistenceCheck","setWordExistenceCheck","modalTrigger","setModalTrigger","word","translation","newEntry","setNewEntry","orig","trans","checks","setCheck","warning","setWarning","vocab","setVocab","thankYou","sayThanks","useEffect","dataBaseUpdate","get","then","response","temp","data","arr","Object","keys","map","i","catch","error","console","log","wordAdder","event","id","target","value","answer","modal","onClick","wordAdding","placeholder","onChange","required","preventDefault","doesTheWordExists","find","undefined","post","res","setTimeout","type","input","toLowerCase","replace","filter","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07b990c2.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst instance = axios.create({\r\n    baseURL: 'https://react-my-burger-36d25-default-rtdb.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\nimport './Spinner.css'\r\nconst spinner = () => (<div className=\"loader\">Loading...</div>)\r\nexport default spinner;","import {useState, useEffect} from 'react';\nimport axios from './axios';\nimport Spinner from './Spinner/Spinner'\nimport './App.css';\n\nfunction App() {\n  const [words, setWords] = useState('')\n  const [currentWord, setCurrentWord] = useState(null)\n  const [foundWord, setFoundWord] = useState(null);\n  const [wordExistenceCheck, setWordExistenceCheck] = useState(true)\n  const [modalTrigger, setModalTrigger] = useState(false)\n  const [newEntry, setNewEntry] = useState({word: '', translation: ''})\n  const [checks, setCheck] = useState({orig: false, trans: false})\n  const [warning, setWarning] = useState('')\n  const [vocab, setVocab] = useState(false)\n  const [thankYou, sayThanks] = useState(false);\n  useEffect(() => {\n    dataBaseUpdate()\n  }, [])\n  const dataBaseUpdate = () => {\n    axios.get('https://react-my-burger-36d25-default-rtdb.firebaseio.com/fenya.json')\n    .then(response => {\n      let temp = response.data\n      let keyz = Object.keys(temp);\n      let arr = keyz.map(i => {\n        return {word: temp[i].word, translation: temp[i].translation}\n      })\n      setWords(arr)\n    })\n    .catch(error => console.log(error))\n  }\n  \n  const wordSearcher = () => {\n    if (currentWord !== null && currentWord != '') {\n      let input = currentWord.toLowerCase().replace(/[.,\\n\\s]/gi, '').toLowerCase()\n      let doesTheWordExists = words.find(i => i.word === input)\n      if (doesTheWordExists != null) {\n        let res = words.filter(i => {\n          return i.word === input\n        })\n        setFoundWord(res)\n      } else {\n        setFoundWord(null)\n        setWordExistenceCheck(false)\n      }\n    }\n  }\n  const wordAdder = (event, id) => {\n    console.log(newEntry)\n    if (id === 'orig') {\n      setNewEntry({word: event.target.value, translation: ''})\n      setCheck({orig: true, trans: false})\n    }\n    if (id === 'trans' && newEntry.word != '') {\n      setNewEntry({word: newEntry.word, translation: event.target.value})\n      setCheck({orig: true, trans: true})\n    } \n    if (id === 'trans' && newEntry.word == '') {\n      setNewEntry({word: '', translation: event.target.value})\n      setCheck({orig: false, trans: true})\n    }\n  }\n  const wordSetter = (event) => {\n    event.preventDefault()\n    let doesTheWordExists = words.find(i => i.word === newEntry.word)\n    if (newEntry.word == '' && newEntry.translation == '') {\n      setCheck({orig: false, trans: false})\n      setWarning('Мне кажется, что в полях пусто...')\n    }\n    if (checks.orig === true && checks.trans === true && doesTheWordExists === undefined) {\n      axios.post('/fenya.json', newEntry)\n      .then(res => setWords(null))\n      .then(res => dataBaseUpdate())\n      setNewEntry({word: '', translation: ''})\n      setCheck({orig: false, trans: false})\n      setWarning('')\n      sayThanks(!thankYou)\n      setModalTrigger(!modalTrigger)\n      setTimeout(() => {\n        sayThanks(false)\n        setModalTrigger(true)\n      }, 3000)\n    } \n    if (checks.trans !== true) {\n      setWarning('Ты забыл указать перевод')\n    } \n    if (checks.orig !== true) {\n      setWarning('Введи слово на русском сначала')\n    }\n    console.log(doesTheWordExists)\n    if (doesTheWordExists !== undefined) {\n      setWarning('Такое слово уже есть')\n    }\n  }\n\n    let answer = foundWord === null ? null : <div>\n    <p>Cлово <strong>\"{foundWord[0].word}\"</strong></p>\n    <p>переводится как: <strong>\"{foundWord[0].translation}\"</strong></p>\n    </div>\n    let modal = wordExistenceCheck === true ? null : (\n      <div className=\"modaladding\">\n        <p>Такого слова ещё нет. Добавить?</p>\n      <button onClick={() => setModalTrigger(true)}>Да</button>\n      <button onClick={() => {\n        setWordExistenceCheck(true)\n        setModalTrigger(false)\n        }}>Нет</button>\n      </div>\n    )\n    let wordAdding = modalTrigger === true ? (\n      <div>\n        <p>Добавить слово</p>\n        <form>\n        <input placeholder='Слово на русском' onChange={(event) => wordAdder(event, 'orig') } required></input>\n        <input placeholder='Слово на фене' onChange={(event) => wordAdder(event, 'trans')} required></input>\n        <button onClick={wordSetter} type=\"submit\">Добавить</button>\n        </form>\n        <div>\n          {warning}\n        </div>\n      </div>\n    ) : thankYou === true ? (\n    <div>\n    <h4>Спасибо!</h4> \n    <p>Диалоговое окно закроется через 3 сек.</p>\n    </div>\n    )\n    : null\n  return (\n    <div className=\"App\">\n      <h2>Азабетхи.</h2>\n      {words === '' ? <Spinner /> : (\n        <div>\n          <div>\n            <p>Введи слово</p>\n            <input onChange={(event) => setCurrentWord(event.target.value)}></input>\n            <button onClick={wordSearcher}>Найти</button>\n            {modal}\n            <div>\n              {answer}\n            </div>\n          </div>\n          {wordAdding}\n         \n          {vocab === true && words !== '' ? (\n            <div>\n              <h2 className=\"switchTheVocab\" onClick={() => {setVocab(!vocab)}}>Закрыть весь словарь</h2>\n              <table>\n              <tr><th>Слово</th><th>Перевод</th></tr>\n              {words.map(i => {\n                return (\n                  <tr><td>{i.word}</td><td>{i.translation}</td></tr>\n                  )\n              })}\n            </table> \n          </div>) :  <h2 className=\"switchTheVocab\" onClick={() => {setVocab(!vocab)}}>Открыть весь словарь</h2>}\n          </div>\n      )}\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}